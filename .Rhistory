inspect(fsets.top5)
data("Adult")
## Mine frequent itemsets with Eclat.
fsets <- eclat(Adult, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
fsets.top5 <- SORT(fsets)1:5?
inspect(fsets.top5)
## Get the itemsets as a list
as(items(fsets.top5), "list")
## Get the itemsets as a binary matrix
as(items(fsets.top5), "matrix")
## Get the itemsets as a sparse matrix, a ngCMatrix from package Matrix.
## Warning: for efficiency reasons, the ngCMatrix you get is transposed
as(items(fsets.top5), "ngCMatrix")
fsets
data("Groceries")
Groceries
gr<-eclat(Groceries, parameter=list(support=0.1, tidlists=TRUE))
gr<-eclat(Groceries, parameter=list(support=0.1)
)
GR
gr
Groceries
dim(gr)
as(gr, "list")
as(Groceries, "list")
as.data.frame(Groceries)
list<-as.list(Groceries)
list<-as(Groceries, "list")
list
head(list)
image(list)
inspect(list)
ata <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("b","e"),
c("b","c","e"),
c("a","d","e"),
c("a","c"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
ata
t <- as(ata, "transactions")
t
f <- eclat(ata, parameter = list(support = 0, tidLists = TRUE))
dim(tidLists(f))
as(tidLists(f), "list")
image(tidLists(f))
inspect(f)
library("arules")
library("Matrix")
library("arules")
data(Groceries)
itemsets <- eclat(Groceries, parameter = list(support = 0.1, minlen=2, tidLists = TRUE, target="frequent itemsets"))
itemset
itemsets
itemsets <- eclat(Groceries, parameter = list(support = 0.1, target="frequent itemsets"))
itemsets
inspect(itemsets)
library("Matrix")
library("arules")
data(Groceries)
?eclat
itemsets <- eclat(Groceries, parameter = list(support = 0.1, target="frequent itemsets"))
inspect(itemsets)
Groceries
list(Groceries)
as.list(Groceries)
data.frame(Groceries)
as.data.frame(Groceries)
whole milk
Groceries
Itemsets
itemsets
itemsets <- eclat(Groceries, parameter = list(support = 0.05)
)
itemsets
inspect(itemsets)
household_power_consumption <- read.csv("C:/Users/ftorrent/Desktop/Data Science Track1/Coursera/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";")
View(household_power_consumption)
data<-household_power_consumption
rm(household_power)
rm(household_power_consumption)
object_size(data)
library(pryr)
library(dplyr)
?size
?object_size
??size
package(Matrix)
library(Matrix)
library(arules)
size(data)
data(data)
data("data")
View(data)
filter(data,Date=="02/01/2007":"02/02/2007")
filter(data,Date=="02/01/2007"|Date=="02/02/2007"
)
filtered<-filter(data,Date=="02/01/2007"|Date=="02/02/2007")
filtered
rm(filtered)
data$Date
subset(data$Date)
subset(data$Date == "01/02/2007")
?subset
filtered<-filter(data,Date=="02/01/2007")
str(data$Date)
as.date(data$Date)
strptime(data$Date)
strptime(data$Date, as.date)
subset(data$Date == 23/12/2006)
subset(data$Date == "23/12/2006")
filter(data, Date == "23/12/2006")
filteredfilter(data, Date == "23/12/2006")
filtered<-filter(data, Date == "23/12/2006")
filtered
head(filtered)
filtered<-filter(data, Date == "01/02/2007")
filtered<-filter(data, Date == "02/01/2007")
subset <-Date == "1/2/2007|Date ==2/2/2007"
subset <-Date == "1/2/2007|Date ==2/2/2007")
subset <-Date == "1/2/2007|Date ==2/2/2007"
subset <-data$Date == "1/2/2007|data$Date ==2/2/2007"
newData<-data[subset,]
newdata
Newdata
newData
rm(filtered)
rm(newData)
subset
newData<-data[subset, ]
attach(newData)
x<-paste(Date, Time)
newData$DateTime<-strptime(x, "%d/%m/%Y %H:%M:%S")
rownames(newData)<-1:nrow(newData)
rm(newData)
rm(subset)
rm(x)
newdata<-filter(data, Date=="1/2/2007"|Date=="2/2/2007")
newdata
head(newdata)
View(newdata)
?strptime
View(newdata)
strptime(newdata$Date, "%d/%m/%Y")
as.strptime(newdata$Date, "%d/%m/%Y")
day<-strptime(newdata$Date, "%d/%m/%Y")
mutate(newdata, Date = as.strptime(newdata$Date, "%d/%m/%Y")
)
mutate(newdata, Date = strptime(newdata$Date, "%d/%m/%Y")
)
png(filename = "plot1.png",
width = 480, height = 480,
units = "px", bg = "transparent")
read.table()
?read.table
library(utils)
library(Matrix)
library(arules)
library(dplyr)
data <- read.delim("C:/Users/ftorrent/Desktop/MovieLens Recommender System/ml-100k (1)/ml-100k/u.data", header=FALSE)
View(data)
?colNames
?colnames
colnames(data, c("user_id", "item_id", "rating", "timestamp" ))
colnames<-c("user_id", "item_id", "rating", "timestamp" )
cbind(data, colnames)
data
colnames=colnames
colnames(data)<-c("user_id", "item_id", "rating", "timestamp" )
data
View(data)
arrange(data, desc(user_id))
data<-arrange(data, desc(user_id))
head(data)
View(data)
data<-arrange(data, user_id)
View(data)
datarules<-select(data, user_id, item_id)
datarules
View(datarules)
head(datarules)
transactions<-as(datarules, "transactions")
str(datarules)
table(datarules)
View(datarules)
View(datarules)
datarules
split(datarules$user_id, datarules$item_id)
sapply(split(datarules$user_id, datarules$item_id), table)
splitted<-split(datarules$user_id, datarules$item_id)
splitted
splitted<-split(datarules$item_id, datarules$user_id)
splitted
trans<-as(splitted, "transactions")
trans
itemsets <- eclat(trans, parameter = list(support = 0.1, target="frequent itemsets"))
itemsets
inspect(itemsets)
itemsets <- eclat(trans, parameter = list(support = 0.5, target="frequent itemsets"))
inspect(itemsets)
itemsets <- eclat(trans, parameter = list(support = 0.5)
)
inspect(itemsets)
?eclat
#Carreguem tots els paquets necessaris:
library(dplyr)
library(Matrix)
library(arules)
library(arulesViz)
#Llegim primer les dades de movielens:
data <- read.delim("C:/Users/ftorrent/Desktop/MovieLens Recommender System/ml-100k (1)/ml-100k/u.data", header=FALSE)
#Posem nom a les columnes:
colnames(data)<-c("user_id", "item_id", "rating", "timestamp" )
#Ordenem les dades per ordre d'usuari (per visualitzar-les millor, pas opcional)
data<-arrange(data, user_id)
#Com que necessitem nomÃ©s usuaris i pelicules visualitzades (per fer com si fossin transaccions),
#eliminem les altres dos variables (rating i timestamp)
datarules<-select(data, user_id, item_id)
#Separem cada usuari per les pelicules que ha vist (transaccions que ha fet) en una llista:
splitted<-split(datarules$item_id, datarules$user_id)
# Aquesta llista, la passem a la categoria de "transactions" del paquet arules:
trans<-as(splitted, "transactions")
#Finalment, apliquem l'algoritme aviam que ens surt:
rules <- apriori(trans, parameter=list(support=0.3, confidence=0.9))
inspect(rules)
length(datarules$item_id == 50)
filter(datarules, item_id==50)
length(filter(datarules, item_id==50))
only50<-filter(datarules, item_id==50)
only50
rm(only50)
head(splitted)
onlymovies<-select(datarules, item_id)
onlymovies
View(onlymovies)
arrange(onlymovies, item_id)
onlymovies<-arrange(onlymovies, item_id)
onlymovies
moviesplitted<-split(onlymovies, movie_id)
moviesplitted<-split(onlymovies, item_id)
moviesplitted<-split(onlymovies, _id)
moviesplitted<-split(onlymovies)
moviesplitted<-split(onlymovies$item_id)
View(onlymovies)
summary(onlymovies)
table(onlymovies)
table<-table(onlymovies)
table
length(table)
table<-as.data.frame(table)
table
View(table)
arrange(table, Freq)
frequency<-arrange(table, desc(Freq)
)
frequency
View(frequency)
library(dplyr)
library(recommenderlab)
library("fracdiff", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
detach("package:fracdiff", unload=TRUE)
library("ggplot2", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
library("arules", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
library("arulesViz", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
library("data.table", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
library("recommenderlab", lib.loc="C:/BIG DATA TOOLS/R-3.1.3/library")
ata <- read.delim("C:/Users/ftorrent/Desktop/MovieLens Recommender System/ml-100k (1)/ml-100k/u.data", header=FALSE)
ata = data
data <- read.delim("C:/Users/ftorrent/Desktop/MovieLens Recommender System/ml-100k (1)/ml-100k/u.data", header=FALSE)
rm(ata)
colnames(data)<-c("user_id", "item_id", "rating", "timestamp" )
head(data)
data<-arrange(data, user_id:rating)
data<-select(data, user_id:rating)
data
?recommend
?Recommender
rec<-Recommender(data, method="POPULAR")
recommender(data)
Recommender(data)
head(data)
arrange(data, item_id)
data<-arrange(data, item_id)
data
View(data)
sapply(split(data$rating, data$item_id), mean)
means<-table(sapply(split(data$rating, data$item_id), mean))
means
rm(means)
means<-(sapply(split(data$rating, data$item_id), mean))
means
means<-as.data.frame(means)
means
View(means)
means<-arrange(means, means)
means
View(means)
means<-as.data.frame(means)
means<-(sapply(split(data$rating, data$item_id), mean))
head(means)
as.data.frame(means)
means
table(means)
means
means<-as.matrix(means)
means
View(means)
means<-arrange(means, V1)
means<-as.data.frame(means)
means
View(means)
arrange(means, V1)
means<-arrange(means, v1)
means<-arrange(means, V1)
head(means)
View(means)
splitted<-split(data$rating, data$item_id)
head(splitted)
sapply(splitted, mean)
splitted
sapply(splitted, length)
numberofratings<-sapply(splitted, length)
numberofratings
nor<-as.data.frame(numberofratings)
View(nor)
View(means)
View(data)
head(splitted)
spl<-as.data.frame(splitted)
splitted
filter(splitted, length==1)
nor
filtered<-filter(nor, numberofratings>5)
filtered
View(filtered)
rm(numberofratings)
rm(filtered)
rm(nor)
View(means)
rm(means)
View(data)
data<-select(data, item_id, rating)
data
View(data)
splitted<-split(data$item_id, data$rating)
splitted
splitted<-split(data$rating, data$item_id)
splitted
length(splitted)
mean(splitted)
sapply(splitted, mean)
sapply(splitted, mean, if length>3)
splitted
split<-as.data.frame(splitted)
str(splitted)
tail(str(splitted))
splitted
splitted[54]
spl<-drop(splitted[1682])
spl
splitted
sapply(splitted, length)
numberofratings<-sapply(splitted, length)
as.table(numberofratings)
table(numberofratings)
df<-as.data.frame(numberofratings)
d
View(df)
dffiltered<-filter(df, numberofratings>5)
dffiltered
sapply(splitted, mean)
means<-sapply(splitted, mean)
means
as.data.frame(means)
as.data.frame(means)
means<-as.data.frame(means)
merge(means, df)
merged<-merge(means, df)
head(merged)
cbind(df, means)
merged<-cbind(df, means)
head(merged)
View(merged)
meansfiltered<-filter(merged, numberofratings>10)
View(meansfiltered)
meansfiltered<-arrange(meansfiltered, desc(means))
head(meansfiltered)
View(meansfiltered)
#Carreguem tots els paquets necessaris:
library(dplyr)
library(Matrix)
library(arules)
library(arulesViz)
#Llegim primer les dades de movielens:
data <- read.delim("C:/Users/ftorrent/Desktop/MovieLens Recommender System/ml-100k (1)/ml-100k/u.data", header=FALSE)
View(data)
colnames(data)<-c("user_id", "item_id", "rating", "timestamp" )
View(data)
datarules<-select(data, user_id, item_id)
View(datarules)
datarules<-select(data, user_id, item_id, ratings)
datarules<-select(data, user_id, item_id, rating)
View(datarules)
length(datarules$user_id)
length(datarules$user_id == 196)
filter(datarules, user_id==196)
write.csv(datalens)
write.csv(datarules)
head(write.csv(datarules))
write.csv(datarules, file="datalens.csv")
library(lnme)
library(lnme)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?text
?axis
?text
?panel.lmline
library(datasets)
data(airquality)
p<-xyplot(Ozone~Wind|factor(Month), data=airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
movies
movies<-movies
View(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies)
library(data.table)
library(ggplot2)
library(knit)
library(knitr)
library(dplyr)
setwd("C:/Users/ftorrent/RepData_PeerAssessment1")
setwd("C:/Users/ftorrent/RepData_PeerAssessment1")
```
###Loading the data
```{r}
data <- read.csv("activity.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
```
activity <- read.csv("C:/Users/ftorrent/RepData_PeerAssessment1/activity.csv")
View(activity)
data <- read.csv("C:/Users/ftorrent/RepData_PeerAssessment1/activity.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
rm(activity)
View(data)
View(data)
data_without <- data[which(!is.na(data$steps)),]
View(data_without)
View(data_without)
View(data)
View(data_without)
View(data_without)
View(data_without)
data<-select(data_without, -row.names)
data<-select(data_without, -"row.names")
View(data_without)
data<-select(data_without, steps:interval)
View(data)
steps_by_day<-tapply(data_without$steps, data_without$date, sum)
mean_without <- mean(steps_per_day)
mean_without
median_without <- median(steps_per_day)
median_without
mean_without <- mean(steps_by_day)
mean_without
median_without <- median(steps_by_day)
median_without
```
View(data)
data <- read.csv("C:/Users/ftorrent/RepData_PeerAssessment1/activity.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
```{r}
mean_with <- mean(steps_per_day_with)
mean_with
```
```{r}
median_with <- median(steps_per_day_with)
median_with
```
steps_per_day_with <- tapply(data_with$steps, data_with$date, sum)
data_with <- data
data_with[which(is.na(data_with$steps)),1] <-steps_per_interval[as.character(data_with[which(is.na(data_with$steps)),3])]
Title: "Reproducible Research. Assignment 1"
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
data_with$wd <- weekdays(data_with$date)
data_with$fwd <- as.factor(c("weekend","weekday"))
data_with[data_with$wd == "domingo" | data_with$wd == "sabado",5] <- factor("weekend") #Weekend also dependant on language format.
data_with[!(data_with$wd == "domingo" | data_with$wd == "sabado"),5] <- factor("weekday") #Weekday also dependant on language format
data_with_we <- subset(data_with, fwd == "weekend")
data_with_wd <- subset(data_with, fwd == "weekday")
steps_per_day_we <- tapply(data_with_we$steps, data_with_we$interval, mean)
steps_per_day_wd <- tapply(data_with_wd$steps, data_with_wd$interval, mean)
```
